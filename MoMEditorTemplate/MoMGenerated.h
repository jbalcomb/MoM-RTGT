// File: MoMGenerated.h
// Generated from: MoMTemplate.h

#include <iostream>

#include "MoMTemplate.h"

namespace MoM {

std::ostream& operator<<(std::ostream& os, const eBannerColor& rhs);
std::ostream& operator<<(std::ostream& os, const eBonusDeposit& rhs);
std::ostream& operator<<(std::ostream& os, const eBuilding& rhs);
std::ostream& operator<<(std::ostream& os, const eBuilding8& rhs);
std::ostream& operator<<(std::ostream& os, const eBuildingStatus& rhs);
std::ostream& operator<<(std::ostream& os, const eCity_Size& rhs);
std::ostream& operator<<(std::ostream& os, const eCombatEnchantment& rhs);
std::ostream& operator<<(std::ostream& os, const eDifficulty& rhs);
std::ostream& operator<<(std::ostream& os, const eDifficulty140m& rhs);
std::ostream& operator<<(std::ostream& os, const eEvent& rhs);
std::ostream& operator<<(std::ostream& os, const eGameState& rhs);
std::ostream& operator<<(std::ostream& os, const eGrand_Vizier& rhs);
std::ostream& operator<<(std::ostream& os, const eHelpIndex& rhs);
std::ostream& operator<<(std::ostream& os, const eHeroAbility& rhs);
std::ostream& operator<<(std::ostream& os, const eHero_Level_Status& rhs);
std::ostream& operator<<(std::ostream& os, const eHero_TypeCode& rhs);
std::ostream& operator<<(std::ostream& os, const eItemPower& rhs);
std::ostream& operator<<(std::ostream& os, const eItem_Icon& rhs);
std::ostream& operator<<(std::ostream& os, const eItem_Type& rhs);
std::ostream& operator<<(std::ostream& os, const eLand_Size& rhs);
std::ostream& operator<<(std::ostream& os, const eLand_Size140m& rhs);
std::ostream& operator<<(std::ostream& os, const eLevel& rhs);
std::ostream& operator<<(std::ostream& os, const eMagic_Powerful& rhs);
std::ostream& operator<<(std::ostream& os, const eMagic_Powerful140m& rhs);
std::ostream& operator<<(std::ostream& os, const eNode_Type& rhs);
std::ostream& operator<<(std::ostream& os, const eObjective& rhs);
std::ostream& operator<<(std::ostream& os, const eOwner& rhs);
std::ostream& operator<<(std::ostream& os, const ePersonality& rhs);
std::ostream& operator<<(std::ostream& os, const ePlane& rhs);
std::ostream& operator<<(std::ostream& os, const ePlayer& rhs);
std::ostream& operator<<(std::ostream& os, const ePortrait& rhs);
std::ostream& operator<<(std::ostream& os, const eProducing& rhs);
std::ostream& operator<<(std::ostream& os, const eRace& rhs);
std::ostream& operator<<(std::ostream& os, const eRandomPickType& rhs);
std::ostream& operator<<(std::ostream& os, const eRanged_Type& rhs);
std::ostream& operator<<(std::ostream& os, const eRarity& rhs);
std::ostream& operator<<(std::ostream& os, const eRealm_Type& rhs);
std::ostream& operator<<(std::ostream& os, const eReward_Specials& rhs);
std::ostream& operator<<(std::ostream& os, const eSkill& rhs);
std::ostream& operator<<(std::ostream& os, const eSkill16& rhs);
std::ostream& operator<<(std::ostream& os, const eSlot_Type16& rhs);
std::ostream& operator<<(std::ostream& os, const eSlot_Type8& rhs);
std::ostream& operator<<(std::ostream& os, const eSpell& rhs);
std::ostream& operator<<(std::ostream& os, const eSpell16& rhs);
std::ostream& operator<<(std::ostream& os, const eSpellCategory& rhs);
std::ostream& operator<<(std::ostream& os, const eSpellKnown& rhs);
std::ostream& operator<<(std::ostream& os, const eSpellKnown16& rhs);
std::ostream& operator<<(std::ostream& os, const eSpell_Type& rhs);
std::ostream& operator<<(std::ostream& os, const eTax_Rate& rhs);
std::ostream& operator<<(std::ostream& os, const eTerrainType& rhs);
std::ostream& operator<<(std::ostream& os, const eTower_Node_Lair_Status& rhs);
std::ostream& operator<<(std::ostream& os, const eTower_Node_Lair_Type& rhs);
std::ostream& operator<<(std::ostream& os, const eUnitAbility& rhs);
std::ostream& operator<<(std::ostream& os, const eUnitEnchantment& rhs);
std::ostream& operator<<(std::ostream& os, const eUnitMutation& rhs);
std::ostream& operator<<(std::ostream& os, const eUnit_Active& rhs);
std::ostream& operator<<(std::ostream& os, const eUnit_Status& rhs);
std::ostream& operator<<(std::ostream& os, const eUnit_Type& rhs);
std::ostream& operator<<(std::ostream& os, const eWar_Status& rhs);
std::ostream& operator<<(std::ostream& os, const eWeaponType& rhs);
std::ostream& operator<<(std::ostream& os, const eYesNo16& rhs);
std::ostream& operator<<(std::ostream& os, const eYesNo8& rhs);

std::ostream& operator<<(std::ostream& os, const Ability_Flags& rhs);
std::ostream& operator<<(std::ostream& os, const Attack_Flags& rhs);
std::ostream& operator<<(std::ostream& os, const Attribute_Flags& rhs);
std::ostream& operator<<(std::ostream& os, const Available_spell_page& rhs);
std::ostream& operator<<(std::ostream& os, const Battle_Unit& rhs);
std::ostream& operator<<(std::ostream& os, const Battlefield& rhs);
std::ostream& operator<<(std::ostream& os, const BorlandSegmentEntry& rhs);
std::ostream& operator<<(std::ostream& os, const BorlandStub& rhs);
std::ostream& operator<<(std::ostream& os, const BorlandStubJmpEntry& rhs);
std::ostream& operator<<(std::ostream& os, const Building_Data& rhs);
std::ostream& operator<<(std::ostream& os, const Building_Status& rhs);
std::ostream& operator<<(std::ostream& os, const City& rhs);
std::ostream& operator<<(std::ostream& os, const City_Enchantments& rhs);
std::ostream& operator<<(std::ostream& os, const Combat_Enchantment& rhs);
std::ostream& operator<<(std::ostream& os, const Difficulty_Table& rhs);
std::ostream& operator<<(std::ostream& os, const EXE_Header& rhs);
std::ostream& operator<<(std::ostream& os, const EXE_Reloc& rhs);
std::ostream& operator<<(std::ostream& os, const Events_Status& rhs);
std::ostream& operator<<(std::ostream& os, const Fortress& rhs);
std::ostream& operator<<(std::ostream& os, const Game_Data_Save& rhs);
std::ostream& operator<<(std::ostream& os, const Game_Settings& rhs);
std::ostream& operator<<(std::ostream& os, const Global_Enchantments& rhs);
std::ostream& operator<<(std::ostream& os, const HelpLBXentry& rhs);
std::ostream& operator<<(std::ostream& os, const Hero_Ability& rhs);
std::ostream& operator<<(std::ostream& os, const Hero_Choice& rhs);
std::ostream& operator<<(std::ostream& os, const Hero_Stats_Initializer& rhs);
std::ostream& operator<<(std::ostream& os, const Hero_stats& rhs);
std::ostream& operator<<(std::ostream& os, const Hired_Hero& rhs);
std::ostream& operator<<(std::ostream& os, const Immunity_Flags& rhs);
std::ostream& operator<<(std::ostream& os, const Item& rhs);
std::ostream& operator<<(std::ostream& os, const ItemLBX& rhs);
std::ostream& operator<<(std::ostream& os, const Item_Bonuses& rhs);
std::ostream& operator<<(std::ostream& os, const Item_Powers& rhs);
std::ostream& operator<<(std::ostream& os, const LBXHEADER& rhs);
std::ostream& operator<<(std::ostream& os, const Lair_Inhabitant& rhs);
std::ostream& operator<<(std::ostream& os, const List_Hero_stats& rhs);
std::ostream& operator<<(std::ostream& os, const Location& rhs);
std::ostream& operator<<(std::ostream& os, const MapRow_Bonus& rhs);
std::ostream& operator<<(std::ostream& os, const MapRow_Exploration& rhs);
std::ostream& operator<<(std::ostream& os, const MapRow_LandMassID& rhs);
std::ostream& operator<<(std::ostream& os, const MapRow_Movement& rhs);
std::ostream& operator<<(std::ostream& os, const MapRow_Terrain& rhs);
std::ostream& operator<<(std::ostream& os, const MapRow_Terrain_Flags& rhs);
std::ostream& operator<<(std::ostream& os, const Map_Attr& rhs);
std::ostream& operator<<(std::ostream& os, const Map_Movement& rhs);
std::ostream& operator<<(std::ostream& os, const Map_Tiles& rhs);
std::ostream& operator<<(std::ostream& os, const MoMDataSegment& rhs);
std::ostream& operator<<(std::ostream& os, const MoMMagicDataSegment& rhs);
std::ostream& operator<<(std::ostream& os, const Movement_Flags& rhs);
std::ostream& operator<<(std::ostream& os, const Node_Attr& rhs);
std::ostream& operator<<(std::ostream& os, const Race_Data& rhs);
std::ostream& operator<<(std::ostream& os, const SaveGame& rhs);
std::ostream& operator<<(std::ostream& os, const Skills& rhs);
std::ostream& operator<<(std::ostream& os, const Spell_Data& rhs);
std::ostream& operator<<(std::ostream& os, const Spells_Cast_in_Battle& rhs);
std::ostream& operator<<(std::ostream& os, const Spells_Known& rhs);
std::ostream& operator<<(std::ostream& os, const Terrain_Flags& rhs);
std::ostream& operator<<(std::ostream& os, const Tower_Attr& rhs);
std::ostream& operator<<(std::ostream& os, const Tower_Node_Lair& rhs);
std::ostream& operator<<(std::ostream& os, const Tower_Node_Lair_Flags& rhs);
std::ostream& operator<<(std::ostream& os, const Unit& rhs);
std::ostream& operator<<(std::ostream& os, const Unit_Data_Hero_Types& rhs);
std::ostream& operator<<(std::ostream& os, const Unit_Enchantment& rhs);
std::ostream& operator<<(std::ostream& os, const Unit_Type_Data& rhs);
std::ostream& operator<<(std::ostream& os, const Unit_Weapon_Mutation& rhs);
std::ostream& operator<<(std::ostream& os, const Upkeep_Enchantments& rhs);
std::ostream& operator<<(std::ostream& os, const Wizard& rhs);
std::ostream& operator<<(std::ostream& os, const Wizard_Type_Data& rhs);
std::ostream& operator<<(std::ostream& os, const WizardsExe_Game_Data& rhs);
std::ostream& operator<<(std::ostream& os, const WizardsExe_Game_Data140m& rhs);
std::ostream& operator<<(std::ostream& os, const WizardsExe_Pointers& rhs);
std::ostream& operator<<(std::ostream& os, const WizardsExe_Save_Name& rhs);
std::ostream& operator<<(std::ostream& os, const unionAbility_Flags& rhs);
std::ostream& operator<<(std::ostream& os, const unionAttack_Flags& rhs);
std::ostream& operator<<(std::ostream& os, const unionAttribute_Flags& rhs);
std::ostream& operator<<(std::ostream& os, const unionBuilding_Status& rhs);
std::ostream& operator<<(std::ostream& os, const unionHero_Abilities& rhs);
std::ostream& operator<<(std::ostream& os, const unionImmunity_Flags& rhs);
std::ostream& operator<<(std::ostream& os, const unionItem_Powers& rhs);
std::ostream& operator<<(std::ostream& os, const unionList_Hero_stats& rhs);
std::ostream& operator<<(std::ostream& os, const unionMovement_Flags& rhs);
std::ostream& operator<<(std::ostream& os, const unionSkills& rhs);
std::ostream& operator<<(std::ostream& os, const unionTower_Node_Lair_Flags& rhs);
std::ostream& operator<<(std::ostream& os, const unionUnit_Enchantment& rhs);
std::ostream& operator<<(std::ostream& os, const unionUnit_Weapon_Mutation& rhs);

bool validate(const eBannerColor& rhs, const std::string& context);
bool validate(const eBonusDeposit& rhs, const std::string& context);
bool validate(const eBuilding& rhs, const std::string& context);
bool validate(const eBuilding8& rhs, const std::string& context);
bool validate(const eBuildingStatus& rhs, const std::string& context);
bool validate(const eCity_Size& rhs, const std::string& context);
bool validate(const eCombatEnchantment& rhs, const std::string& context);
bool validate(const eDifficulty& rhs, const std::string& context);
bool validate(const eDifficulty140m& rhs, const std::string& context);
bool validate(const eEvent& rhs, const std::string& context);
bool validate(const eGameState& rhs, const std::string& context);
bool validate(const eGrand_Vizier& rhs, const std::string& context);
bool validate(const eHelpIndex& rhs, const std::string& context);
bool validate(const eHeroAbility& rhs, const std::string& context);
bool validate(const eHero_Level_Status& rhs, const std::string& context);
bool validate(const eHero_TypeCode& rhs, const std::string& context);
bool validate(const eItemPower& rhs, const std::string& context);
bool validate(const eItem_Icon& rhs, const std::string& context);
bool validate(const eItem_Type& rhs, const std::string& context);
bool validate(const eLand_Size& rhs, const std::string& context);
bool validate(const eLand_Size140m& rhs, const std::string& context);
bool validate(const eLevel& rhs, const std::string& context);
bool validate(const eMagic_Powerful& rhs, const std::string& context);
bool validate(const eMagic_Powerful140m& rhs, const std::string& context);
bool validate(const eNode_Type& rhs, const std::string& context);
bool validate(const eObjective& rhs, const std::string& context);
bool validate(const eOwner& rhs, const std::string& context);
bool validate(const ePersonality& rhs, const std::string& context);
bool validate(const ePlane& rhs, const std::string& context);
bool validate(const ePlayer& rhs, const std::string& context);
bool validate(const ePortrait& rhs, const std::string& context);
bool validate(const eProducing& rhs, const std::string& context);
bool validate(const eRace& rhs, const std::string& context);
bool validate(const eRandomPickType& rhs, const std::string& context);
bool validate(const eRanged_Type& rhs, const std::string& context);
bool validate(const eRarity& rhs, const std::string& context);
bool validate(const eRealm_Type& rhs, const std::string& context);
bool validate(const eReward_Specials& rhs, const std::string& context);
bool validate(const eSkill& rhs, const std::string& context);
bool validate(const eSkill16& rhs, const std::string& context);
bool validate(const eSlot_Type16& rhs, const std::string& context);
bool validate(const eSlot_Type8& rhs, const std::string& context);
bool validate(const eSpell& rhs, const std::string& context);
bool validate(const eSpell16& rhs, const std::string& context);
bool validate(const eSpellCategory& rhs, const std::string& context);
bool validate(const eSpellKnown& rhs, const std::string& context);
bool validate(const eSpellKnown16& rhs, const std::string& context);
bool validate(const eSpell_Type& rhs, const std::string& context);
bool validate(const eTax_Rate& rhs, const std::string& context);
bool validate(const eTerrainType& rhs, const std::string& context);
bool validate(const eTower_Node_Lair_Status& rhs, const std::string& context);
bool validate(const eTower_Node_Lair_Type& rhs, const std::string& context);
bool validate(const eUnitAbility& rhs, const std::string& context);
bool validate(const eUnitEnchantment& rhs, const std::string& context);
bool validate(const eUnitMutation& rhs, const std::string& context);
bool validate(const eUnit_Active& rhs, const std::string& context);
bool validate(const eUnit_Status& rhs, const std::string& context);
bool validate(const eUnit_Type& rhs, const std::string& context);
bool validate(const eWar_Status& rhs, const std::string& context);
bool validate(const eWeaponType& rhs, const std::string& context);
bool validate(const eYesNo16& rhs, const std::string& context);
bool validate(const eYesNo8& rhs, const std::string& context);

bool validate(const Ability_Flags& rhs, const std::string& context);
bool validate(const Attack_Flags& rhs, const std::string& context);
bool validate(const Attribute_Flags& rhs, const std::string& context);
bool validate(const Available_spell_page& rhs, const std::string& context);
bool validate(const Battle_Unit& rhs, const std::string& context);
bool validate(const Battlefield& rhs, const std::string& context);
bool validate(const BorlandSegmentEntry& rhs, const std::string& context);
bool validate(const BorlandStub& rhs, const std::string& context);
bool validate(const BorlandStubJmpEntry& rhs, const std::string& context);
bool validate(const Building_Data& rhs, const std::string& context);
bool validate(const Building_Status& rhs, const std::string& context);
bool validate(const City& rhs, const std::string& context);
bool validate(const City_Enchantments& rhs, const std::string& context);
bool validate(const Combat_Enchantment& rhs, const std::string& context);
bool validate(const Difficulty_Table& rhs, const std::string& context);
bool validate(const EXE_Header& rhs, const std::string& context);
bool validate(const EXE_Reloc& rhs, const std::string& context);
bool validate(const Events_Status& rhs, const std::string& context);
bool validate(const Fortress& rhs, const std::string& context);
bool validate(const Game_Data_Save& rhs, const std::string& context);
bool validate(const Game_Settings& rhs, const std::string& context);
bool validate(const Global_Enchantments& rhs, const std::string& context);
bool validate(const HelpLBXentry& rhs, const std::string& context);
bool validate(const Hero_Ability& rhs, const std::string& context);
bool validate(const Hero_Choice& rhs, const std::string& context);
bool validate(const Hero_Stats_Initializer& rhs, const std::string& context);
bool validate(const Hero_stats& rhs, const std::string& context);
bool validate(const Hired_Hero& rhs, const std::string& context);
bool validate(const Immunity_Flags& rhs, const std::string& context);
bool validate(const Item& rhs, const std::string& context);
bool validate(const ItemLBX& rhs, const std::string& context);
bool validate(const Item_Bonuses& rhs, const std::string& context);
bool validate(const Item_Powers& rhs, const std::string& context);
bool validate(const LBXHEADER& rhs, const std::string& context);
bool validate(const Lair_Inhabitant& rhs, const std::string& context);
bool validate(const List_Hero_stats& rhs, const std::string& context);
bool validate(const Location& rhs, const std::string& context);
bool validate(const MapRow_Bonus& rhs, const std::string& context);
bool validate(const MapRow_Exploration& rhs, const std::string& context);
bool validate(const MapRow_LandMassID& rhs, const std::string& context);
bool validate(const MapRow_Movement& rhs, const std::string& context);
bool validate(const MapRow_Terrain& rhs, const std::string& context);
bool validate(const MapRow_Terrain_Flags& rhs, const std::string& context);
bool validate(const Map_Attr& rhs, const std::string& context);
bool validate(const Map_Movement& rhs, const std::string& context);
bool validate(const Map_Tiles& rhs, const std::string& context);
bool validate(const MoMDataSegment& rhs, const std::string& context);
bool validate(const MoMMagicDataSegment& rhs, const std::string& context);
bool validate(const Movement_Flags& rhs, const std::string& context);
bool validate(const Node_Attr& rhs, const std::string& context);
bool validate(const Race_Data& rhs, const std::string& context);
bool validate(const SaveGame& rhs, const std::string& context);
bool validate(const Skills& rhs, const std::string& context);
bool validate(const Spell_Data& rhs, const std::string& context);
bool validate(const Spells_Cast_in_Battle& rhs, const std::string& context);
bool validate(const Spells_Known& rhs, const std::string& context);
bool validate(const Terrain_Flags& rhs, const std::string& context);
bool validate(const Tower_Attr& rhs, const std::string& context);
bool validate(const Tower_Node_Lair& rhs, const std::string& context);
bool validate(const Tower_Node_Lair_Flags& rhs, const std::string& context);
bool validate(const Unit& rhs, const std::string& context);
bool validate(const Unit_Data_Hero_Types& rhs, const std::string& context);
bool validate(const Unit_Enchantment& rhs, const std::string& context);
bool validate(const Unit_Type_Data& rhs, const std::string& context);
bool validate(const Unit_Weapon_Mutation& rhs, const std::string& context);
bool validate(const Upkeep_Enchantments& rhs, const std::string& context);
bool validate(const Wizard& rhs, const std::string& context);
bool validate(const Wizard_Type_Data& rhs, const std::string& context);
bool validate(const WizardsExe_Game_Data& rhs, const std::string& context);
bool validate(const WizardsExe_Game_Data140m& rhs, const std::string& context);
bool validate(const WizardsExe_Pointers& rhs, const std::string& context);
bool validate(const WizardsExe_Save_Name& rhs, const std::string& context);
bool validate(const unionAbility_Flags& rhs, const std::string& context);
bool validate(const unionAttack_Flags& rhs, const std::string& context);
bool validate(const unionAttribute_Flags& rhs, const std::string& context);
bool validate(const unionBuilding_Status& rhs, const std::string& context);
bool validate(const unionHero_Abilities& rhs, const std::string& context);
bool validate(const unionImmunity_Flags& rhs, const std::string& context);
bool validate(const unionItem_Powers& rhs, const std::string& context);
bool validate(const unionList_Hero_stats& rhs, const std::string& context);
bool validate(const unionMovement_Flags& rhs, const std::string& context);
bool validate(const unionSkills& rhs, const std::string& context);
bool validate(const unionTower_Node_Lair_Flags& rhs, const std::string& context);
bool validate(const unionUnit_Enchantment& rhs, const std::string& context);
bool validate(const unionUnit_Weapon_Mutation& rhs, const std::string& context);

}
