# file: example_mom.py

# This file illustrates the proxy class C++ interface generated by SWIG.

from mom import *

# ----------------------------------------------------------------------------
#
# Make a connection to MoM
#
# ----------------------------------------------------------------------------

# Connect tot MoM
g = connectToMoM()
if not g.isOpen():
	print("\nFailed to find MoM")
	exit

print("# ---------------------------------------------------------------------")
print("#")
print("# Show the functionality of the lowe level interface MoMProcess")
print("#")
print("# ---------------------------------------------------------------------")

# Get a handle on the MoMProcess object
p = g.getMoMProcess()

# Show what you can do with the MoMProcess object
exeFilepath = p.getExeFilepath()
print("\nExeFilepath=", exeFilepath)

print("\nSome gory details")
print("\tBaseAddress=", p.getBaseAddress())
print("\tBaseAddressSize=", p.getBaseAddressSize())
print("\tDatasegmentData=", p.getDatasegmentData())
print("\tBaseAddress=", p.getBaseAddress())
print("\tOffsetSegment0=", p.getOffsetSegment0())
print("\tOffsetCode=", p.getOffsetCode())
print("\tOffsetDatasegment=", p.getOffsetDatasegment())
print("\tProcessHandle=", p.getProcessHandle())
print("\tSeg0Pointer=", p.getSeg0Pointer())
print("\tOffset_DS_Code=", p.getOffset_DS_Code())

print("\nManipulating data")
dseg = uint8_array.frompointer(p.getDatasegmentData())
	
# Gold reserve is a word at ds:A220
#gold = getWord(dseg, 0xA220)
gold = dseg[0xA220] + 256 * dseg[0xA221]
print("\tGold=", gold)
gold += 10
dseg[0xA220] = gold % 256
dseg[0xA221] = gold // 256
#ok = p.writeData(ptr, 2)
#print("\tGold ", gold, " written with result", ok)
ok = p.readData()
print("\tReread data with result", ok)
gold = dseg[0xA220] + 256 * dseg[0xA221]
print("\tGold=", gold)

# Alternative for manipulating data
#ptr = getPointer(dseg, 0xA126)
#mana = getWord(ptr, 0)
#print("\tMana ", mana)
#mana += 10
#setWord(ptr, mana)
#ok = p.writeData(ptr, 2)
#print("\tMana ", mana, " written with result", ok)
#ok = p.readData()
#print("\tReread data with result", ok)
#mana = getWord(dseg, 0xA126)
#print("\tMana=", mana)

# Copyright_and_Version[41] is at ds:7151  Offset version is at [34]
#version = getStr(getPointer(dseg, 0x7151 + 34))
#print("MoMVersion=", version)

file = "test.dmp"
print("\nSaving to ", file);
if p.save(file):
    print("Save successful");
else:
    print("Save failed");

#TODO
#void* derefPointer(const EXE_Reloc& pointer, size_t size)
#bool validPointer(void* pointer, size_t size)

print("\n")
print("# ---------------------------------------------------------------------")
print("#")
print("# Show the functionality of MoMGameBase")
print("#")
print("# ---------------------------------------------------------------------")
print("")

print("GameDirectory=", g.getGameDirectory())
print("Version=", g.getMoMVersion())

print("Out-of-range checks")
print("\tBattleUnit[99]=", g.getBattleUnit(99))
try:
    b = g.getBattleUnit(99)
    print("\ttactic=", b.m_Status)
except:
    print("\tException: could not manipulate BattleUnit[99]")

print("BattleUnit manipulations")
b = g.getBattleUnit(0)
if b == None:
    print("BattleUnit[0] not available. Skipping")
else:
    print("\tBattleUnit[0]")
    print("\ttactic=", b.m_Status)
    print("\tSeting tactic to shoot")
    b.m_Status = 101
    ok = g.commitData(b,0x6E)
    print("\tCommit data:", ok)

print("Wizard manipulations")
wiz = g.getWizard(PLAYER_YOU)
if wiz == None:
    print("Wizard not available. Skipping")
else:
    print("\tName=", wiz.m_Name)
    print("\tGold=", wiz.m_Gold_Coins)
    print("\tIncreasing gold by 10")
    wiz.m_Gold_Coins += 10
    ok = g.commitData(wiz,0x4C8)
    print("\tCommit data:", ok)
    ok = p.readData()
    print("\tReread data:", ok)
    print("\tGold=", wiz.m_Gold_Coins)

print("City wall manipulations")
try:
    print("Create 1 broken wall of 4 pieces on the battlefield")
    f = g.getBattlefield()
    f.m_City_Walls = True
    a = uint16_array.frompointer(f.m_Wall_is_whole)
    for i in range(4):
        a[i] = 2
    ok = g.commitData(f, 0x159C)
    print("\tCommit data:", ok)
except:
    print("Failed to set the city walls")

# ----------------------------------------------------------------------------
#
# Clean up
#
# ----------------------------------------------------------------------------

#print("\nClosing connection now (optional)")
#g.close()
print("IsOpen=", g.isOpen())
	
#print("\nCleaning up")
#del g

#print("Goodbye")

